"""
A helper script to convert docs generated by pydoc-markdown to a format that
can be used by the Galileo 2.0 docs.
"""

import re
from pathlib import Path


def process_markdown_files():
    """
    Process all .md files in .generated_docs/reference folder and subdirectories:
    - Remove sidebar_label: line
    - Escape curly braces
    - Add autogenerated comment after front matter
    - Rename file extension to .mdx
    """
    reference_dir = Path(".generated_docs/reference")

    if not reference_dir.exists():
        print(f"Directory {reference_dir} does not exist")
        return

    # Find all .md files recursively in the directory and subdirectories
    md_files = list(reference_dir.rglob("*.md"))

    if not md_files:
        print("No .md files found in the reference directory or its subdirectories")
        return

    print(f"Found {len(md_files)} .md files to process")

    for md_file in md_files:
        # Show relative path for better context
        relative_path = md_file.relative_to(reference_dir)
        print(f"Processing: {relative_path}")

        # Read the file content
        try:
            with open(md_file, encoding="utf-8") as f:
                content = f.read()
        except Exception as e:
            print(f"Error reading {relative_path}: {e}")
            continue

        # Remove the sidebar_label: line
        # This handles both "sidebar_label:" and "sidebar_label: value" patterns
        lines = content.split("\n")
        filtered_lines = []

        for line in lines:
            # Skip lines that contain only "sidebar_label:" or "sidebar_label: something"
            if not re.match(r"^\s*sidebar_label:\s*.*$", line):
                filtered_lines.append(line)

        modified_content = "\n".join(filtered_lines)

        # Escape curly braces for MDX
        modified_content = modified_content.replace("{", "\\{").replace("}", "\\}")

        # Add autogenerated comment after front matter
        autogen_comment = "{/* This page is autogenerated from the Python SDK. Do not edit this file as it will be replaced on the next SDK publish */}"

        # Find the end of front matter and insert comment
        lines = modified_content.split("\n")
        front_matter_end = -1

        # Look for front matter (starts and ends with ---)
        if lines and lines[0].strip() == "---":
            for i, line in enumerate(lines[1:], 1):
                if line.strip() == "---":
                    front_matter_end = i
                    break

        if front_matter_end != -1:
            # Insert comment after front matter
            lines.insert(front_matter_end + 1, "")
            lines.insert(front_matter_end + 2, autogen_comment)
            lines.insert(front_matter_end + 3, "")
        else:
            # No front matter found, add at the beginning
            lines.insert(0, autogen_comment)
            lines.insert(1, "")

        modified_content = "\n".join(lines)

        # Create new .mdx file path
        mdx_file = md_file.with_suffix(".mdx")

        try:
            # Write the modified content to the new .mdx file
            with open(mdx_file, "w", encoding="utf-8") as f:
                f.write(modified_content)

            # Remove the original .md file
            md_file.unlink()

            print(f"âœ“ Converted {relative_path} to {mdx_file.name}")

        except Exception as e:
            print(f"Error processing {relative_path}: {e}")

    print("Processing complete!")


if __name__ == "__main__":
    process_markdown_files()
