from typing import Literal, cast

ScorerName = Literal[
    "_action_advancement_luna",
    "_action_completion_luna",
    "_adherence_nli",
    "_agentic_session_success",
    "_agentic_workflow_success",
    "_bleu",
    "_chunk_attribution_utilization_gpt",
    "_chunk_attribution_utilization_nli",
    "_completeness_gpt",
    "_completeness_nli",
    "_context_adherence_luna",
    "_context_relevance",
    "_cost",
    "_customized_agentic_session_success",
    "_customized_agentic_workflow_success",
    "_customized_chunk_attribution_utilization_gpt",
    "_customized_completeness_gpt",
    "_customized_factuality",
    "_customized_ground_truth_adherence",
    "_customized_groundedness",
    "_customized_input_sexist_gpt",
    "_customized_input_toxicity_gpt",
    "_customized_instruction_adherence",
    "_customized_prompt_injection_gpt",
    "_customized_sexist_gpt",
    "_customized_tool_error_rate",
    "_customized_tool_selection_quality",
    "_customized_toxicity_gpt",
    "_factuality",
    "_generic_wizard",
    "_ground_truth_adherence",
    "_groundedness",
    "_input_pii",
    "_input_sexist",
    "_input_sexist_gpt",
    "_input_tone",
    "_input_toxicity",
    "_input_toxicity_gpt",
    "_instruction_adherence",
    "_latency",
    "_pii",
    "_prompt_injection",
    "_prompt_injection_gpt",
    "_prompt_perplexity",
    "_protect_status",
    "_rag_nli",
    "_rouge",
    "_sexist",
    "_sexist_gpt",
    "_tone",
    "_tool_error_rate",
    "_tool_error_rate_luna",
    "_tool_selection_quality",
    "_tool_selection_quality_luna",
    "_toxicity",
    "_toxicity_gpt",
    "_uncertainty",
    "_user_finetuned",
    "_user_generated",
    "_user_registered",
    "_user_submitted",
]

SCORER_NAME_VALUES: set[ScorerName] = {
    "_action_advancement_luna",
    "_action_completion_luna",
    "_adherence_nli",
    "_agentic_session_success",
    "_agentic_workflow_success",
    "_bleu",
    "_chunk_attribution_utilization_gpt",
    "_chunk_attribution_utilization_nli",
    "_completeness_gpt",
    "_completeness_nli",
    "_context_adherence_luna",
    "_context_relevance",
    "_cost",
    "_customized_agentic_session_success",
    "_customized_agentic_workflow_success",
    "_customized_chunk_attribution_utilization_gpt",
    "_customized_completeness_gpt",
    "_customized_factuality",
    "_customized_ground_truth_adherence",
    "_customized_groundedness",
    "_customized_input_sexist_gpt",
    "_customized_input_toxicity_gpt",
    "_customized_instruction_adherence",
    "_customized_prompt_injection_gpt",
    "_customized_sexist_gpt",
    "_customized_tool_error_rate",
    "_customized_tool_selection_quality",
    "_customized_toxicity_gpt",
    "_factuality",
    "_generic_wizard",
    "_ground_truth_adherence",
    "_groundedness",
    "_input_pii",
    "_input_sexist",
    "_input_sexist_gpt",
    "_input_tone",
    "_input_toxicity",
    "_input_toxicity_gpt",
    "_instruction_adherence",
    "_latency",
    "_pii",
    "_prompt_injection",
    "_prompt_injection_gpt",
    "_prompt_perplexity",
    "_protect_status",
    "_rag_nli",
    "_rouge",
    "_sexist",
    "_sexist_gpt",
    "_tone",
    "_tool_error_rate",
    "_tool_error_rate_luna",
    "_tool_selection_quality",
    "_tool_selection_quality_luna",
    "_toxicity",
    "_toxicity_gpt",
    "_uncertainty",
    "_user_finetuned",
    "_user_generated",
    "_user_registered",
    "_user_submitted",
}


def check_scorer_name(value: str) -> ScorerName:
    if value in SCORER_NAME_VALUES:
        return cast(ScorerName, value)
    raise TypeError(f"Unexpected value {value!r}. Expected one of {SCORER_NAME_VALUES!r}")
